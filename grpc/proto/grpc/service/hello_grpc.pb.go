// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.13.0
// source: hello.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hello_SayHello_FullMethodName  = "/proto.Hello/SayHello"
	Hello_SayHello2_FullMethodName = "/proto.Hello/SayHello2"
	Hello_SayHello3_FullMethodName = "/proto.Hello/SayHello3"
	Hello_SayHello4_FullMethodName = "/proto.Hello/SayHello4"
)

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	// 简单应答模式
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// 请求流模式
	SayHello2(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHello2Client, error)
	// 返回流模式
	SayHello3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Hello_SayHello3Client, error)
	// 双向流模式
	SayHello4(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHello4Client, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Hello_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) SayHello2(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHello2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[0], Hello_SayHello2_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSayHello2Client{stream}
	return x, nil
}

type Hello_SayHello2Client interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloSayHello2Client struct {
	grpc.ClientStream
}

func (x *helloSayHello2Client) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloSayHello2Client) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) SayHello3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Hello_SayHello3Client, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[1], Hello_SayHello3_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSayHello3Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_SayHello3Client interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloSayHello3Client struct {
	grpc.ClientStream
}

func (x *helloSayHello3Client) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) SayHello4(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHello4Client, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[2], Hello_SayHello4_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSayHello4Client{stream}
	return x, nil
}

type Hello_SayHello4Client interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloSayHello4Client struct {
	grpc.ClientStream
}

func (x *helloSayHello4Client) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloSayHello4Client) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility
type HelloServer interface {
	// 简单应答模式
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	// 请求流模式
	SayHello2(Hello_SayHello2Server) error
	// 返回流模式
	SayHello3(*HelloRequest, Hello_SayHello3Server) error
	// 双向流模式
	SayHello4(Hello_SayHello4Server) error
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (UnimplementedHelloServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloServer) SayHello2(Hello_SayHello2Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedHelloServer) SayHello3(*HelloRequest, Hello_SayHello3Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello3 not implemented")
}
func (UnimplementedHelloServer) SayHello4(Hello_SayHello4Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello4 not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hello_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_SayHello2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).SayHello2(&helloSayHello2Server{stream})
}

type Hello_SayHello2Server interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloSayHello2Server struct {
	grpc.ServerStream
}

func (x *helloSayHello2Server) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloSayHello2Server) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_SayHello3_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).SayHello3(m, &helloSayHello3Server{stream})
}

type Hello_SayHello3Server interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloSayHello3Server struct {
	grpc.ServerStream
}

func (x *helloSayHello3Server) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Hello_SayHello4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).SayHello4(&helloSayHello4Server{stream})
}

type Hello_SayHello4Server interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloSayHello4Server struct {
	grpc.ServerStream
}

func (x *helloSayHello4Server) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloSayHello4Server) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello2",
			Handler:       _Hello_SayHello2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHello3",
			Handler:       _Hello_SayHello3_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHello4",
			Handler:       _Hello_SayHello4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
